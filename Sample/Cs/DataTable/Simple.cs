// <auto-generated>
// generated using ContentTool. DO NOT EDIT!
// </auto-generated>

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Collections.ObjectModel;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json;

namespace ContentData
{
    #pragma warning disable
    
    [JsonConverter(typeof(StringEnumConverter))]
    public enum GenderEnum
    {
        None = 0,
        Male = 1,
        Female = 2,
        Max = 3,
    }

    public partial class SimpleMutable
    {
        public string Id { get; set; }
        public double IntegerValue { get; set; }
        public float FloatValue { get; set; }
        public string StringValue { get; set; }
        public string DateTimeValue { get; set; }
        public bool BooleanValue { get; set; }
        public GenderEnum EnumValue { get; set; }
    }

    public partial class SimpleTableMutable
    {
        public IList<SimpleMutable> SimpleList { get; set; }
    }

    //////////////////////////////
    // readonly class
    //////////////////////////////
    public partial class Simple
    {
        public readonly string Id;
        public readonly double IntegerValue;
        public readonly float FloatValue;
        public readonly string StringValue;
        public readonly string DateTimeValue;
        public readonly bool BooleanValue;
        public readonly GenderEnum EnumValue;
        public Simple(SimpleMutable data)
        {
            Id = data.Id;
            IntegerValue = data.IntegerValue;
            FloatValue = data.FloatValue;
            StringValue = data.StringValue;
            DateTimeValue = data.DateTimeValue;
            BooleanValue = data.BooleanValue;
            EnumValue = data.EnumValue;
        }
    }

    public partial class SimpleTable
    {
        public readonly IReadOnlyList<Simple> SimpleList;
        public SimpleTable(SimpleTableMutable data)
        {
            if(data.SimpleList != null)
                SimpleList = data.SimpleList.Select(x => new Simple(x)).ToList().AsReadOnly();
        }
    }

}
