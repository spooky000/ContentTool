// <auto-generated>
// generated using ContentTool. DO NOT EDIT!
// </auto-generated>
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Collections.ObjectModel;

#pragma warning disable CS8601

namespace ContentData
{
    public partial class ACContent
    {
        public SimpleTable SimpleTable { get; private set; }
        public ObjectTable ObjectTable { get; private set; }
        public ArrayTable ArrayTable { get; private set; }
        public MultiRowTable MultiRowTable { get; private set; }
        public SimpleTable SimpleTable { get; private set; }
        public void Load(string dataDir)
        {
            LoadSimpleTable(dataDir);
            LoadObjectTable(dataDir);
            LoadArrayTable(dataDir);
            LoadMultiRowTable(dataDir);
            LoadSimpleTable(dataDir);
        }
        
        void LoadSimpleTable(string dataDir)
        {
            var table = ContentLoader.LoadFile<SimpleTableMutable>(dataDir, "Simple.json");
            SimpleTable = new SimpleTable(table);
            SimpleTable.Build();
        }
        
        void LoadObjectTable(string dataDir)
        {
            var table = ContentLoader.LoadFile<ObjectTableMutable>(dataDir, "Object.json");
            ObjectTable = new ObjectTable(table);
            ObjectTable.Build();
        }
        
        void LoadArrayTable(string dataDir)
        {
            var table = ContentLoader.LoadFile<ArrayTableMutable>(dataDir, "Array.json");
            ArrayTable = new ArrayTable(table);
            ArrayTable.Build();
        }
        
        void LoadMultiRowTable(string dataDir)
        {
            var table = ContentLoader.LoadFile<MultiRowTableMutable>(dataDir, "MultiRow.json");
            MultiRowTable = new MultiRowTable(table);
            MultiRowTable.Build();
        }
        void LoadSimpleTable(string dataDir)
        {
            var table = ContentLoader.LoadMultipleFiles<SimpleTableMutable>(dataDir, "MultiXlsx_*");
            SimpleTable = new SimpleTable(table);
            SimpleTable.Build();
        }
    }
    public partial class ACZoneContent
    {
        public bool Load(string dataDir)
        {
            if(File.Exists(Path.Combine(dataDir, "ZoneData.json")) == false)
                return false;
                
            return true;
        }
    }
    public partial class SimpleTable
    {
        public IReadOnlyDictionary<string, Simple> SimpleListbyId { get; private set; }
        public void Build()
        {
            if(SimpleList != null)
            {
                SimpleListbyId = new ReadOnlyDictionary<string, Simple>(SimpleList.ToDictionary(item => item.Id));
            }
        }
    }
    public partial class SimpleTableMutable : ContentTableBase<SimpleTableMutable>
    {
        public override void Merge(SimpleTableMutable table)
        {
            if(SimpleList != null && table.SimpleList != null)
            {
                SimpleList = SimpleList.Concat(table.SimpleList).ToList();
            }
        }
    }
    public partial class ObjectTable
    {
        public IReadOnlyDictionary<string, Object> ObjectListbyId { get; private set; }
        public void Build()
        {
            if(ObjectList != null)
            {
                ObjectListbyId = new ReadOnlyDictionary<string, Object>(ObjectList.ToDictionary(item => item.Id));
            }
        }
    }
    public partial class ObjectTableMutable : ContentTableBase<ObjectTableMutable>
    {
        public override void Merge(ObjectTableMutable table)
        {
            if(ObjectList != null && table.ObjectList != null)
            {
                ObjectList = ObjectList.Concat(table.ObjectList).ToList();
            }
        }
    }
    public partial class ArrayTable
    {
        public IReadOnlyDictionary<string, Array> ArrayListbyId { get; private set; }
        public void Build()
        {
            if(ArrayList != null)
            {
                ArrayListbyId = new ReadOnlyDictionary<string, Array>(ArrayList.ToDictionary(item => item.Id));
            }
        }
    }
    public partial class ArrayTableMutable : ContentTableBase<ArrayTableMutable>
    {
        public override void Merge(ArrayTableMutable table)
        {
            if(ArrayList != null && table.ArrayList != null)
            {
                ArrayList = ArrayList.Concat(table.ArrayList).ToList();
            }
        }
    }
    public partial class MultiRowTable
    {
        public IReadOnlyDictionary<string, MultiRow> MultiRowListbyId { get; private set; }
        public void Build()
        {
            if(MultiRowList != null)
            {
                MultiRowListbyId = new ReadOnlyDictionary<string, MultiRow>(MultiRowList.ToDictionary(item => item.Id));
            }
        }
    }
    public partial class MultiRowTableMutable : ContentTableBase<MultiRowTableMutable>
    {
        public override void Merge(MultiRowTableMutable table)
        {
            if(MultiRowList != null && table.MultiRowList != null)
            {
                MultiRowList = MultiRowList.Concat(table.MultiRowList).ToList();
            }
        }
    }
    public partial class SimpleTable
    {
        public IReadOnlyDictionary<string, Simple> SimpleListbyId { get; private set; }
        public void Build()
        {
            if(SimpleList != null)
            {
                SimpleListbyId = new ReadOnlyDictionary<string, Simple>(SimpleList.ToDictionary(item => item.Id));
            }
        }
    }
    public partial class SimpleTableMutable : ContentTableBase<SimpleTableMutable>
    {
        public override void Merge(SimpleTableMutable table)
        {
            if(SimpleList != null && table.SimpleList != null)
            {
                SimpleList = SimpleList.Concat(table.SimpleList).ToList();
            }
        }
    }
}
